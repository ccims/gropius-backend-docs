"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4173],{56305:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>k,default:()=>I,frontMatter:()=>g,metadata:()=>b,toc:()=>v});var n=i(487462),s=(i(667294),i(603905)),a=i(258219),r=(i(162316),i(580667)),o=i.n(r),l=i(524228),d=i.n(l),u=i(909487),p=i(241429),c=i(905397),m=i(504667),h=i(809472),y=i(685162);const g={id:"users-controller-edit-user-9",title:"NOT IMPLEMENTED! Update an existing user object",description:"**NOTE**: Not implemented yet. Will always fail.",sidebar_label:"NOT IMPLEMENTED! Update an existing user object",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"UsersController_editUser_9",description:"**NOTE**: Not implemented yet. Will always fail.\n\nUpdates an existing user object using the given data.\nOnly the entries that are given in the input will be updated in the user.\n\nNeeds Admin permissions",parameters:[{name:"id",required:!0,in:"path",description:"The uuid string of the existing user to edit",schema:{format:"uuid",type:"string"}}],responses:{200:{description:"If sucessful, the updated user object",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",description:"The unique ID of this login user",example:"12345678-90ab-cdef-fedc-ab0987654321"},neo4jId:{type:"string",nullable:!0,description:"The id of this user in the neo4j database.\n\nIf null after initialization, there was an error.\nMust be unique as relation to GropiusUser is 1:1."},username:{type:"string",description:"The plain text username of the user.\nMust be kept in sync with username in backend.\n\nCurrently has no use outside the userpass strategy"},revokeTokensBefore:{format:"date-time",type:"string",description:"All tokens (INCLUDING access tokens) issued to this user **before** this date are no longer valid.\n\nUsed to 'emergency'-Revoke tokens"}},required:["id","neo4jId","username","revokeTokensBefore"],title:"LoginUser"}}}},404:{description:"If no user with the given id could be found"}},tags:["login-api"],security:[{bearer:[]}],method:"put",path:"/login/user/{id}",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"NOT IMPLEMENTED! Update an existing user object",description:{content:"**NOTE**: Not implemented yet. Will always fail.\n\nUpdates an existing user object using the given data.\nOnly the entries that are given in the input will be updated in the user.\n\nNeeds Admin permissions",type:"text/plain"},url:{path:["login","user",":id"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) The uuid string of the existing user to edit",type:"text/plain"},type:"any",value:"",key:"id"}]},header:[{key:"Accept",value:"application/json"}],method:"PUT",auth:{type:"apikey",apikey:[{type:"any",value:"<API Key Name>",key:"key"},{type:"any",value:"<API Key>",key:"value"},{type:"any",value:"header",key:"in"}]}}},sidebar_class_name:"put api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},k=void 0,b={unversionedId:"login-service/users-controller-edit-user-9",id:"login-service/users-controller-edit-user-9",title:"NOT IMPLEMENTED! Update an existing user object",description:"**NOTE**: Not implemented yet. Will always fail.",source:"@site/rest-docs/login-service/users-controller-edit-user-9.api.mdx",sourceDirName:"login-service",slug:"/login-service/users-controller-edit-user-9",permalink:"/gropius-backend-docs/rest/login-service/users-controller-edit-user-9",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"users-controller-edit-user-9",title:"NOT IMPLEMENTED! Update an existing user object",description:"**NOTE**: Not implemented yet. Will always fail.",sidebar_label:"NOT IMPLEMENTED! Update an existing user object",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"UsersController_editUser_9",description:"**NOTE**: Not implemented yet. Will always fail.\n\nUpdates an existing user object using the given data.\nOnly the entries that are given in the input will be updated in the user.\n\nNeeds Admin permissions",parameters:[{name:"id",required:!0,in:"path",description:"The uuid string of the existing user to edit",schema:{format:"uuid",type:"string"}}],responses:{200:{description:"If sucessful, the updated user object",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",description:"The unique ID of this login user",example:"12345678-90ab-cdef-fedc-ab0987654321"},neo4jId:{type:"string",nullable:!0,description:"The id of this user in the neo4j database.\n\nIf null after initialization, there was an error.\nMust be unique as relation to GropiusUser is 1:1."},username:{type:"string",description:"The plain text username of the user.\nMust be kept in sync with username in backend.\n\nCurrently has no use outside the userpass strategy"},revokeTokensBefore:{format:"date-time",type:"string",description:"All tokens (INCLUDING access tokens) issued to this user **before** this date are no longer valid.\n\nUsed to 'emergency'-Revoke tokens"}},required:["id","neo4jId","username","revokeTokensBefore"],title:"LoginUser"}}}},404:{description:"If no user with the given id could be found"}},tags:["login-api"],security:[{bearer:[]}],method:"put",path:"/login/user/{id}",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"NOT IMPLEMENTED! Update an existing user object",description:{content:"**NOTE**: Not implemented yet. Will always fail.\n\nUpdates an existing user object using the given data.\nOnly the entries that are given in the input will be updated in the user.\n\nNeeds Admin permissions",type:"text/plain"},url:{path:["login","user",":id"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) The uuid string of the existing user to edit",type:"text/plain"},type:"any",value:"",key:"id"}]},header:[{key:"Accept",value:"application/json"}],method:"PUT",auth:{type:"apikey",apikey:[{type:"any",value:"<API Key Name>",key:"key"},{type:"any",value:"<API Key>",key:"value"},{type:"any",value:"header",key:"in"}]}}},sidebar_class_name:"put api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},sidebar:"restSidebar",previous:{title:"Get any user object by id",permalink:"/gropius-backend-docs/rest/login-service/users-controller-get-one-user-7"},next:{title:"NOT IMPLEMENTED! Update an existing user object",permalink:"/gropius-backend-docs/rest/login-service/users-controller-delete-user-10"}},f={},v=[{value:"Request",id:"request",level:2}],T={toc:v},N="wrapper";function I(e){let{components:t,...i}=e;return(0,s.kt)(N,(0,n.Z)({},T,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{className:"openapi__heading"},"NOT IMPLEMENTED! Update an existing user object"),(0,s.kt)(o(),{method:"put",path:"/login/user/{id}",mdxType:"MethodEndpoint"}),(0,s.kt)(d(),{infoPath:"login-service/gropius-login-service",mdxType:"SecuritySchemes"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE"),": Not implemented yet. Will always fail."),(0,s.kt)("p",null,"Updates an existing user object using the given data.\nOnly the entries that are given in the input will be updated in the user."),(0,s.kt)("p",null,"Needs Admin permissions"),(0,s.kt)("h2",{id:"request"},"Request"),(0,s.kt)("details",{style:{marginBottom:"1rem"},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("h3",{className:"openapi-markdown__details-summary-header-params"},"Path Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(p.Z,{className:"paramsItem",param:{name:"id",required:!0,in:"path",description:"The uuid string of the existing user to edit",schema:{format:"uuid",type:"string"}},mdxType:"ParamsItem"})))),(0,s.kt)("div",null,(0,s.kt)("div",null,(0,s.kt)(a.Z,{mdxType:"ApiTabs"},(0,s.kt)(y.default,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"If sucessful, the updated user object")),(0,s.kt)("div",null,(0,s.kt)(u.Z,{className:"openapi-tabs__mime",schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(y.default,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(h.default,{className:"openapi-tabs__schema",mdxType:"SchemaTabs"},(0,s.kt)(y.default,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},className:"openapi-markdown__details response","data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{},className:"openapi-markdown__details-summary-response"},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(m.Z,{collapsible:!1,name:"id",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The unique ID of this login user",example:"12345678-90ab-cdef-fedc-ab0987654321"},mdxType:"SchemaItem"}),(0,s.kt)(m.Z,{collapsible:!1,name:"neo4jId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",nullable:!0,description:"The id of this user in the neo4j database.\n\nIf null after initialization, there was an error.\nMust be unique as relation to GropiusUser is 1:1."},mdxType:"SchemaItem"}),(0,s.kt)(m.Z,{collapsible:!1,name:"username",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The plain text username of the user.\nMust be kept in sync with username in backend.\n\nCurrently has no use outside the userpass strategy"},mdxType:"SchemaItem"}),(0,s.kt)(m.Z,{collapsible:!1,name:"revokeTokensBefore",required:!0,schemaName:"date-time",qualifierMessage:void 0,schema:{format:"date-time",type:"string",description:"All tokens (INCLUDING access tokens) issued to this user **before** this date are no longer valid.\n\nUsed to 'emergency'-Revoke tokens"},mdxType:"SchemaItem"})))),(0,s.kt)(y.default,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(c.Z,{responseExample:'{\n  "id": "12345678-90ab-cdef-fedc-ab0987654321",\n  "neo4jId": "string",\n  "username": "string",\n  "revokeTokensBefore": "2024-07-03T21:52:34.358Z"\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(y.default,{label:"404",value:"404",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"If no user with the given id could be found")),(0,s.kt)("div",null))))))}I.isMDXComponent=!0}}]);