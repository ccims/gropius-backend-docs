"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[39287],{218953:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>k,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var s=t(487462),o=(t(667294),t(603905)),r=t(689417);const n='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":core:dokkaHtmlPartial/main"><div class="symbol monospace"><span class="token keyword">fun </span><a href="values-"><span class="token function">values</span></a><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html">Array</a><span class="token operator">&lt;</span><a href="index-">MarkerType</a><span class="token operator">&gt;</span></div><p class="paragraph">Returns an array containing the constants of this enum type, in the order they\'re declared.</p><p class="paragraph">This method may be used to iterate over the constants.</p></div></div>\n',p={},l="values",i={unversionedId:"api/core/gropius.model.template.style/-marker-type/values-",id:"api/core/gropius.model.template.style/-marker-type/values-",title:"values",description:"",source:"@site/docs/api/core/gropius.model.template.style/-marker-type/values-.mdx",sourceDirName:"api/core/gropius.model.template.style/-marker-type",slug:"/api/core/gropius.model.template.style/-marker-type/values-",permalink:"/gropius-backend-docs/api/core/gropius.model.template.style/-marker-type/values-",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"valueOf",permalink:"/gropius-backend-docs/api/core/gropius.model.template.style/-marker-type/value-of-"},next:{title:"ShapeType",permalink:"/gropius-backend-docs/api/core/gropius.model.template.style/-shape-type/index-"}},d={},c=[],u={toc:c},m="wrapper";function k(e){let{components:a,...t}=e;return(0,o.kt)(m,(0,s.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"values"},"values"),(0,o.kt)(r.Z,{dokkaHTML:n,mdxType:"DokkaComponent"}))}k.isMDXComponent=!0}}]);