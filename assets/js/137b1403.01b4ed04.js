"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[86861],{223803:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>x,frontMatter:()=>u,metadata:()=>f,toc:()=>k});var i=s(487462),a=(s(667294),s(603905)),n=s(258219),r=(s(162316),s(580667)),o=s.n(r),l=s(524228),p=s.n(l),c=s(909487),g=(s(241429),s(905397)),d=s(504667),y=s(809472),m=s(685162);const u={id:"strategies-controller-get-all-strategy-types-12",title:"List all strategies/strategy types",description:"Returns all known strategies (strategy types) that are registered in the system",sidebar_label:"List all strategies/strategy types",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"StrategiesController_getAllStrategyTypes_12",description:"Returns all known strategies (strategy types) that are registered in the system",parameters:[],responses:{200:{description:"All known strategies in the system",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{typeName:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},canLoginRegister:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},canSync:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},needsRedirectFlow:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},allowsImplicitSignup:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1}},required:["typeName","canLoginRegister","canSync","needsRedirectFlow","allowsImplicitSignup"],title:"GetStrategyResponse"}}}}}},tags:["login-api"],method:"get",path:"/login/strategy",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"List all strategies/strategy types",description:{content:"Returns all known strategies (strategy types) that are registered in the system",type:"text/plain"},url:{path:["login","strategy"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},h=void 0,f={unversionedId:"login-service/strategies-controller-get-all-strategy-types-12",id:"login-service/strategies-controller-get-all-strategy-types-12",title:"List all strategies/strategy types",description:"Returns all known strategies (strategy types) that are registered in the system",source:"@site/rest-docs/login-service/strategies-controller-get-all-strategy-types-12.api.mdx",sourceDirName:"login-service",slug:"/login-service/strategies-controller-get-all-strategy-types-12",permalink:"/gropius-backend-docs/rest/login-service/strategies-controller-get-all-strategy-types-12",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"strategies-controller-get-all-strategy-types-12",title:"List all strategies/strategy types",description:"Returns all known strategies (strategy types) that are registered in the system",sidebar_label:"List all strategies/strategy types",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"StrategiesController_getAllStrategyTypes_12",description:"Returns all known strategies (strategy types) that are registered in the system",parameters:[],responses:{200:{description:"All known strategies in the system",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{typeName:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},canLoginRegister:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},canSync:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},needsRedirectFlow:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},allowsImplicitSignup:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1}},required:["typeName","canLoginRegister","canSync","needsRedirectFlow","allowsImplicitSignup"],title:"GetStrategyResponse"}}}}}},tags:["login-api"],method:"get",path:"/login/strategy",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"List all strategies/strategy types",description:{content:"Returns all known strategies (strategy types) that are registered in the system",type:"text/plain"},url:{path:["login","strategy"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},sidebar:"restSidebar",previous:{title:"List all loginData of one user",permalink:"/gropius-backend-docs/rest/login-service/users-controller-get-login-data-for-user-11"},next:{title:"Get one strategy (type)",permalink:"/gropius-backend-docs/rest/login-service/strategies-controller-get-strategy-type-13"}},b={},k=[{value:"Request",id:"request",level:2}],v={toc:k},w="wrapper";function x(e){let{components:t,...s}=e;return(0,a.kt)(w,(0,i.Z)({},v,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{className:"openapi__heading"},"List all strategies/strategy types"),(0,a.kt)(o(),{method:"get",path:"/login/strategy",mdxType:"MethodEndpoint"}),(0,a.kt)(p(),{infoPath:"login-service/gropius-login-service",mdxType:"SecuritySchemes"}),(0,a.kt)("p",null,"Returns all known strategies (strategy types) that are registered in the system"),(0,a.kt)("h2",{id:"request"},"Request"),(0,a.kt)("div",null,(0,a.kt)("div",null,(0,a.kt)(n.Z,{mdxType:"ApiTabs"},(0,a.kt)(m.default,{label:"200",value:"200",mdxType:"TabItem"},(0,a.kt)("div",null,(0,a.kt)("p",null,"All known strategies in the system")),(0,a.kt)("div",null,(0,a.kt)(c.Z,{className:"openapi-tabs__mime",schemaType:"response",mdxType:"MimeTabs"},(0,a.kt)(m.default,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,a.kt)(y.default,{className:"openapi-tabs__schema",mdxType:"SchemaTabs"},(0,a.kt)(m.default,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,a.kt)("details",{style:{},className:"openapi-markdown__details response","data-collapsed":!1,open:!0},(0,a.kt)("summary",{style:{},className:"openapi-markdown__details-summary-response"},(0,a.kt)("strong",null,"Schema")),(0,a.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,a.kt)("ul",{style:{marginLeft:"1rem"}},(0,a.kt)("li",null,(0,a.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,a.kt)(d.Z,{collapsible:!1,name:"typeName",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},mdxType:"SchemaItem"}),(0,a.kt)(d.Z,{collapsible:!1,name:"canLoginRegister",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},mdxType:"SchemaItem"}),(0,a.kt)(d.Z,{collapsible:!1,name:"canSync",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},mdxType:"SchemaItem"}),(0,a.kt)(d.Z,{collapsible:!1,name:"needsRedirectFlow",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},mdxType:"SchemaItem"}),(0,a.kt)(d.Z,{collapsible:!1,name:"allowsImplicitSignup",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1},mdxType:"SchemaItem"}),(0,a.kt)("li",null,(0,a.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,a.kt)(m.default,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,a.kt)(g.Z,{responseExample:'[\n  {\n    "typeName": "userpass",\n    "canLoginRegister": true,\n    "canSync": false,\n    "needsRedirectFlow": false,\n    "allowsImplicitSignup": false\n  }\n]',language:"json",mdxType:"ResponseSamples"})))))))))))}x.isMDXComponent=!0}}]);